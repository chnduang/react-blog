(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{436:function(e,t,r){"use strict";r.r(t);var v=r(4),_=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("在上一节中我们了解了"),t("code",[e._v("React")]),e._v("的理念，简单概括就是"),t("strong",[e._v("快速响应")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("React")]),e._v("从v15升级到v16后重构了整个架构。本节我们聊聊v15，看看他为什么不能满足"),t("strong",[e._v("快速响应")]),e._v("的理念，以至于被重构。")]),e._v(" "),t("h2",{attrs:{id:"react15架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react15架构"}},[e._v("#")]),e._v(" React15架构")]),e._v(" "),t("p",[e._v("React15架构可以分为两层：")]),e._v(" "),t("ul",[t("li",[e._v("Reconciler（协调器）—— 负责找出变化的组件")]),e._v(" "),t("li",[e._v("Renderer（渲染器）—— 负责将变化的组件渲染到页面上")])]),e._v(" "),t("h3",{attrs:{id:"reconciler-协调器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reconciler-协调器"}},[e._v("#")]),e._v(" Reconciler（协调器）")]),e._v(" "),t("p",[e._v("我们知道，在"),t("code",[e._v("React")]),e._v("中可以通过"),t("code",[e._v("this.setState")]),e._v("、"),t("code",[e._v("this.forceUpdate")]),e._v("、"),t("code",[e._v("ReactDOM.render")]),e._v("等API触发更新。")]),e._v(" "),t("p",[e._v("每当有更新发生时，"),t("strong",[e._v("Reconciler")]),e._v("会做如下工作：")]),e._v(" "),t("ul",[t("li",[e._v("调用函数组件、或class组件的"),t("code",[e._v("render")]),e._v("方法，将返回的JSX转化为虚拟DOM")]),e._v(" "),t("li",[e._v("将虚拟DOM和上次更新时的虚拟DOM对比")]),e._v(" "),t("li",[e._v("通过对比找出本次更新中变化的虚拟DOM")]),e._v(" "),t("li",[e._v("通知"),t("strong",[e._v("Renderer")]),e._v("将变化的虚拟DOM渲染到页面上")])]),e._v(" "),t("blockquote",[t("p",[e._v("你可以在"),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/codebase-overview.html#reconcilers",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1),e._v("看到"),t("code",[e._v("React")]),e._v("官方对"),t("strong",[e._v("Reconciler")]),e._v("的解释")])]),e._v(" "),t("h3",{attrs:{id:"renderer-渲染器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#renderer-渲染器"}},[e._v("#")]),e._v(" Renderer（渲染器）")]),e._v(" "),t("p",[e._v("由于"),t("code",[e._v("React")]),e._v("支持跨平台，所以不同平台有不同的"),t("strong",[e._v("Renderer")]),e._v("。我们前端最熟悉的是负责在浏览器环境渲染的"),t("strong",[e._v("Renderer")]),e._v(" —— "),t("a",{attrs:{href:"https://www.npmjs.com/package/react-dom",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactDOM"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("除此之外，还有：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.npmjs.com/package/react-native",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactNative"),t("OutboundLink")],1),e._v("渲染器，渲染App原生组件")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.npmjs.com/package/react-test-renderer",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactTest"),t("OutboundLink")],1),e._v("渲染器，渲染出纯Js对象用于测试")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.npmjs.com/package/react-art",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReactArt"),t("OutboundLink")],1),e._v("渲染器，渲染到Canvas, SVG 或 VML (IE8)")])]),e._v(" "),t("p",[e._v("在每次更新发生时，"),t("strong",[e._v("Renderer")]),e._v("接到"),t("strong",[e._v("Reconciler")]),e._v("通知，将变化的组件渲染在当前宿主环境。")]),e._v(" "),t("blockquote",[t("p",[e._v("你可以在"),t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/codebase-overview.html#renderers",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1),e._v("看到"),t("code",[e._v("React")]),e._v("官方对"),t("strong",[e._v("Renderer")]),e._v("的解释")])]),e._v(" "),t("h2",{attrs:{id:"react15架构的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react15架构的缺点"}},[e._v("#")]),e._v(" React15架构的缺点")]),e._v(" "),t("p",[e._v("在"),t("strong",[e._v("Reconciler")]),e._v("中，"),t("code",[e._v("mount")]),e._v("的组件会调用"),t("a",{attrs:{href:"https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/ReactDOMComponent.js#L498",target:"_blank",rel:"noopener noreferrer"}},[e._v("mountComponent"),t("OutboundLink")],1),e._v("，"),t("code",[e._v("update")]),e._v("的组件会调用"),t("a",{attrs:{href:"https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/ReactDOMComponent.js#L877",target:"_blank",rel:"noopener noreferrer"}},[e._v("updateComponent"),t("OutboundLink")],1),e._v("。这两个方法都会递归更新子组件。")]),e._v(" "),t("h3",{attrs:{id:"递归更新的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归更新的缺点"}},[e._v("#")]),e._v(" 递归更新的缺点")]),e._v(" "),t("p",[e._v("由于递归执行，所以更新一旦开始，中途就无法中断。当层级很深时，递归更新时间超过了16ms，用户交互就会卡顿。")]),e._v(" "),t("p",[e._v("在上一节中，我们已经提出了解决办法——用"),t("strong",[e._v("可中断的异步更新")]),e._v("代替"),t("strong",[e._v("同步的更新")]),e._v("。那么React15的架构支持异步更新么？让我们看一个例子：")]),e._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[e._v("乘法小Demo")]),e._v(" "),t("p",[t("RouterLink",{attrs:{to:"/source-code/me.html"}},[e._v("关注公众号")]),e._v("，后台回复"),t("strong",[e._v("222")]),e._v("获得在线Demo地址")],1),e._v(" "),t("p",[e._v("初始化时"),t("code",[e._v("state.count = 1")]),e._v("，每次点击按钮"),t("code",[e._v("state.count++")])]),e._v(" "),t("p",[e._v("列表中3个元素的值分别为1，2，3乘以"),t("code",[e._v("state.count")]),e._v("的结果")])]),e._v(" "),t("p",[e._v("我用红色标注了更新的步骤。\n"),t("img",{attrs:{src:e.$withBase("/img/v15.png"),alt:"更新流程"}})]),e._v(" "),t("p",[e._v("我们可以看到，"),t("strong",[e._v("Reconciler")]),e._v("和"),t("strong",[e._v("Renderer")]),e._v("是交替工作的，当第一个"),t("code",[e._v("li")]),e._v("在页面上已经变化后，第二个"),t("code",[e._v("li")]),e._v("再进入"),t("strong",[e._v("Reconciler")]),e._v("。")]),e._v(" "),t("p",[e._v("由于整个过程都是同步的，所以在用户看来所有DOM是同时更新的。")]),e._v(" "),t("p",[e._v("接下来，让我们模拟一下，如果中途中断更新会怎么样？")]),e._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),t("p",[e._v("以下是我们模拟中断的情况，实际上"),t("code",[e._v("React15")]),e._v("并不会中断进行中的更新")])]),e._v(" "),t("img",{attrs:{src:e.$withBase("/img/dist.png"),alt:"中断更新流程"}}),e._v(" "),t("p",[e._v("当第一个"),t("code",[e._v("li")]),e._v("完成更新时中断更新，即步骤3完成后中断更新，此时后面的步骤都还未执行。")]),e._v(" "),t("p",[e._v("用户本来期望"),t("code",[e._v("123")]),e._v("变为"),t("code",[e._v("246")]),e._v("。实际却看见更新不完全的DOM！（即"),t("code",[e._v("223")]),e._v("）")]),e._v(" "),t("p",[e._v("基于这个原因，"),t("code",[e._v("React")]),e._v("决定重写整个架构。")])])}),[],!1,null,null,null);t.default=_.exports}}]);